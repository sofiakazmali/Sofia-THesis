
---
title: "Sofia Thesis"
author: "Your Name"
date: "`r Sys.Date()`"
output: html_document
---

```{r}
# Global options
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)


```

## R Markdown

# Loading the necessary packages
```{r}
library(openxlsx)
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(ggplot2)
library(lubridate)
```

# Reading our CSV
```{r}

df1 <- read_csv2("cons_sec.csv")
df2 <- read_csv2("right_left.csv")
df3 <- read_csv2("market.csv")

```

```{r}
# Select correct columns
df1 <- df1 %>%
  select(Month, Total, Household_cons, Industrial_cons, Energy_sector_cons) %>%
  filter(!grepl("Total", Month)) %>%
  mutate(Month = dmy(Month))

```


```{r}
library(lubridate)
df1_long <- df1 %>%
  pivot_longer(cols = c(Household_cons, Industrial_cons, Energy_sector_cons),
               names_to = "Sector",
               values_to = "Consumption")

# Plot all three on the same chart
ggplot(df1_long, aes(x = Month, y = Consumption, color = Sector)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Monthly Gas Consumption by Sector",
    x = "Month",
    y = "Consumption (million mÂ³)",
    color = "Sector"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Actual Dataset
```{r}
library(stringr)

# Read df2
df2 <- read_csv2("right_left.csv") %>%
  select(Month, price_USD_mcubed) %>%
  filter(!grepl("Total", Month)) %>%               # Remove totals BEFORE parsing dates
  mutate(
    Month = str_trim(Month),                       # Remove any leading/trailing spaces
    Month = dmy(Month),                            # Convert to Date object
    price_USD_mcubed = as.numeric(gsub(",", ".", price_USD_mcubed))
  ) %>%
  arrange(Month)
df1 <- read_csv2("cons_sec.csv") %>%
  select(Month, Total, Household_cons, Industrial_cons, Energy_sector_cons) %>%
  filter(!grepl("Total", Month)) %>%
  mutate(
    Month = str_trim(Month),
    Month = dmy(Month)
  ) %>%
  arrange(Month)
# Full safe merge
df1_merged <- inner_join(df1, df2, by = "Month")


```


# Unit Roots
```{r}
library(tseries)

# Augmented Dickey-Fuller test
adf.test(total_ts)

```

# Autocorrelation, Lyung Box
```{r}
acf(total_ts, main = "ACF of Total Consumption")
pacf(total_ts, main = "PACF of Total Consumption")

# Test for autocorrelation up to lag 12
Box.test(total_ts, lag = 12, type = "Ljung-Box")

```

# Regresyon
```{r}
model <- lm(Total ~ Household_cons + Industrial_cons + Energy_sector_cons, data = df1)
summary(model)

library(sandwich)
library(lmtest)

# Newey-West standard errors
coeftest(model, vcov = NeweyWest(model, lag = 12, prewhite = FALSE))
```

# Time series cross-validation
```{r}
# Load libraries
library(dplyr)
library(lubridate)
library(readr)
library(sandwich)
library(lmtest)

# Read and clean df2
df2 <- read_csv2("right_left.csv") %>%
  select(Month, `Left bank`, `Right bank`, Total, price_USD_mcubed) %>%
  filter(!grepl("Total", Month)) %>%
  mutate(Month = dmy(Month),
         price_USD_mcubed = as.numeric(gsub(",", ".", price_USD_mcubed))) %>%
  arrange(Month)

# 75%-25% time-based split
n_total <- nrow(df2)
n_train <- floor(0.75 * n_total)

train <- df2[1:n_train, ]
test  <- df2[(n_train + 1):n_total, ]

# Linear regression (here we use price + left + right to predict Total)
model_train <- lm(Total ~ `Left bank` + `Right bank` + price_USD_mcubed, data = train)

# Normal OLS summary
summary(model_train)

# Newey-West HAC corrected standard errors (lag 12 for monthly data)
nw_se <- NeweyWest(model_train, lag = 12, prewhite = FALSE)
coeftest(model_train, vcov = nw_se)

# Predict on test set
predictions <- predict(model_train, newdata = test)

# Calculate RMSE
rmse <- sqrt(mean((test$Total - predictions)^2))
rmse

```

```{r}
split_date <- as.Date("2023-01-01")
```

```{r}
df1_merged$Period <- ifelse(df1_merged$Month < split_date, "Before", "After")
```

```{r}
head(df1$Month)
head(df2$Month)
```

```{r}
str(df1$Month)
str(df2$Month)
```

```{r}
df_raw <- read_csv2("right_left.csv")
head(df_raw$price_USD_mcubed, 20)
```

```{r}
df2 <- read_csv2("right_left.csv") %>%
  mutate(
    price_USD_mcubed = str_trim(price_USD_mcubed),
    price_USD_mcubed = na_if(price_USD_mcubed, ""),          # blanks to NA
    price_USD_mcubed = gsub(",", ".", price_USD_mcubed),
    price_USD_mcubed = as.numeric(price_USD_mcubed)
  )
```

```{r}
summary(df2$price_USD_mcubed)
```

```{r}
unique(df_raw$price_USD_mcubed)
```

```{r}
bad_prices <- df_raw$price_USD_mcubed[is.na(as.numeric(gsub(",", ".", df_raw$price_USD_mcubed)))]
unique(bad_prices)
```

```{r}
lines <- readLines("right_left.csv")
lines[30:50] # Inspect problematic lines
```

```{r}
library(readr)
df_test <- read_csv2("right_left.csv")
problems(df_test)
```

```{r}
df2 <- df2 %>%
  filter(!grepl("Total", Month))
```

```{r}
df2 <- read_csv2("right_left2.csv")
```

```{r}
df2 <- read_csv2("right_left2.csv") %>%
  mutate(
    Month = str_trim(Month),
    Month = dmy(Month)
  ) %>%
  arrange(Month)
```

```{r}
str(df2$price_USD_mcubed)
```

```{r}
library(readr)
library(dplyr)
library(stringr)
library(lubridate)

df2 <- read_csv2("right_left2.csv") %>%
  mutate(
    Month = str_trim(Month),
    Month = dmy(Month)
  ) %>%
  arrange(Month)

# Check the result
str(df2)
summary(df2$price_USD_mcubed)
```

```{r}
df2 <- df2[-c(73:78), ]
```

```{r}
str(df1$Month)
str(df2$Month)
```

```{r}
library(dplyr)
anti_join(df1, df2, by = "Month")
```

```{r}
anti_join(df2, df1, by = "Month")
```

```{r}
unique(df1$Month)
unique(df2$Month)
```

```{r}
df1 <- df1 %>%
  mutate(Month = as.Date(format(Month, "%Y-%m-01")))
df2 <- df2 %>%
  mutate(Month = as.Date(format(Month, "%Y-%m-01")))
```

```{r}
df_merged <- inner_join(df1, df2 %>% select(Month, price_USD_mcubed), by = "Month")
```

```{r}
head(df1$Month, 20)
head(df2$Month, 20)
```

```{r}
anti_join(df1, df2, by = "Month")
```

```{r}
library(readr)
library(dplyr)
library(stringr)
library(lubridate)

df1 <- read_csv2("cons_sec2.csv") %>%
  filter(!is.na(Month), !grepl("[a-zA-Z]", Month)) %>%  # Removes blank/Total/etc.
  mutate(
    Month = str_trim(Month),
    Month = dmy(Month)
  ) %>%
  filter(!is.na(Month)) %>%
  arrange(Month)
```

```{r}
df2 <- read_csv2("right_left2.csv") %>%
  filter(!is.na(Month), !grepl("[a-zA-Z]", Month)) %>%  # Removes blank/Total/etc.
  mutate(
    Month = str_trim(Month),
    Month = dmy(Month),
    price_USD_mcubed = str_replace_all(str_trim(price_USD_mcubed), ",", "."),
    price_USD_mcubed = as.numeric(price_USD_mcubed)
  ) %>%
  filter(!is.na(Month)) %>%
  arrange(Month)
```

```{r}
str(df1)
str(df2)
```

```{r}
sum(is.na(df1$Month))
sum(is.na(df2$Month))
```

```{r}
head(df1$Month, 10)
head(df2$Month, 10)
tail(df1$Month, 10)
tail(df2$Month, 10)
```

```{r}
df1 <- df1 %>% select(Month, Total, Household_cons, Industrial_cons, Energy_sector_cons)
df2 <- df2 %>% select(Month, Left_bank, Right_bank, Total, price_USD_mcubed)
```

```{r}
# Remove rows 73 and 74 from df1 (assuming current row order is correct)
df1 <- df1[-c(73, 74), ]

# Now merge with df2 by Month
df_merged <- inner_join(df1, df2 %>% select(Month, price_USD_mcubed), by = "Month")

# Check the result
str(df_merged)
tail(df_merged$Month)
```

```{r}
setdiff(df1$Month, df2$Month)
setdiff(df2$Month, df1$Month)
```

```{r}
head(df1$Month, 10)
head(df2$Month, 10)
tail(df1$Month, 10)
tail(df2$Month, 10)
```

```{r}
str(df1$Month)
str(df2$Month)
```

```{r}
df1$Month <- as.Date(format(df1$Month, "%Y-%m-01"))
df2$Month <- as.Date(format(df2$Month, "%Y-%m-01"))
```

```{r}
df_merged <- inner_join(df1, df2 %>% select(Month, price_USD_mcubed), by = "Month")
```

```{r}
summary(df_merged)
table(is.na(df_merged$price_USD_mcubed))
```

```{r}
df_merged$price_USD_mcubed[df_merged$price_USD_mcubed == ""] <- NA
df_merged$price_USD_mcubed[df_merged$price_USD_mcubed == "NA"] <- NA
df_merged$price_USD_mcubed <- as.numeric(df_merged$price_USD_mcubed)
```

```{r}
table(is.na(df_merged$price_USD_mcubed))
summary(df_merged$price_USD_mcubed)
```

```{r}
library(readr)
library(dplyr)
library(lubridate)

# Load your merged CSV (assuming ; as separator)
df <- read_csv2("cons_sec_price_merged.csv")

# Inspect
str(df)
head(df)
```

```{r}
df <- df %>%
  mutate(Month = as.Date(Month))
```

```{r}
library(readr)
library(dplyr)
library(lubridate)
library(stringr)

# Load the merged file (adjust path as needed)
df <- read_csv2("cons_sec_price_merged.csv")

# Clean and convert columns
df <- df %>%
  mutate(
    Month = dmy(str_trim(Month)),  # Parse "01.01.2019" as date
    price_USD_mcubed = as.numeric(str_replace_all(str_trim(price_USD_mcubed), ",", "."))
  )

# Check your data
str(df)
summary(df$price_USD_mcubed)
head(df)

# Split by period (set your cutoff date as needed)
change_date <- as.Date("2023-01-01")  # change as appropriate
df <- df %>%
  mutate(Period = ifelse(Month < change_date, "Before", "After"))

# Example: create time series for Total, split by Period
df_before <- filter(df, Period == "Before")
df_after  <- filter(df, Period == "After")

ts_before <- ts(df_before$Total, start = c(year(min(df_before$Month)), month(min(df_before$Month))), frequency = 12)
ts_after  <- ts(df_after$Total, start = c(year(min(df_after$Month)), month(min(df_after$Month))), frequency = 12)

# Plot (optional)
plot(ts_before, col = "blue", main = "Total Gas Consumption: Before/After", ylab = "Total", xlab = "Time")
lines(ts_after, col = "red")
legend("topright", legend = c("Before", "After"), col = c("blue", "red"), lty = 1)
```

```{r}
df_before <- subset(df, Period == "Before")
df_after  <- subset(df, Period == "After")
```

```{r}
# For Households
model_household_before <- lm(Household_cons ~ price_USD_mcubed, data = df_before)
model_household_after  <- lm(Household_cons ~ price_USD_mcubed, data = df_after)

# For Industry
model_industrial_before <- lm(Industrial_cons ~ price_USD_mcubed, data = df_before)
model_industrial_after  <- lm(Industrial_cons ~ price_USD_mcubed, data = df_after)

# For Energy Sector
model_energy_before <- lm(Energy_sector_cons ~ price_USD_mcubed, data = df_before)
model_energy_after  <- lm(Energy_sector_cons ~ price_USD_mcubed, data = df_after)
```

```{r}
summary(model_household_before)
summary(model_household_after)

summary(model_industrial_before)
summary(model_industrial_after)

summary(model_energy_before)
summary(model_energy_after)
```

```{r}
library(broom)
results <- bind_rows(
  tidy(model_household_before) %>% mutate(group = "Household", period = "Before"),
  tidy(model_household_after)  %>% mutate(group = "Household", period = "After"),
  tidy(model_industrial_before) %>% mutate(group = "Industrial", period = "Before"),
  tidy(model_industrial_after)  %>% mutate(group = "Industrial", period = "After"),
  tidy(model_energy_before) %>% mutate(group = "Energy", period = "Before"),
  tidy(model_energy_after)  %>% mutate(group = "Energy", period = "After")
)
print(results)
```

```{r}
# Split your data by period (make sure 'Period' is already in your dataframe)
df_before <- subset(df, Period == "Before")
df_after  <- subset(df, Period == "After")

# Regression: Household consumption as a function of gas price

# Before period
model_household_before <- lm(Household_cons ~ price_USD_mcubed, data = df_before)
summary(model_household_before)

# After period
model_household_after <- lm(Household_cons ~ price_USD_mcubed, data = df_after)
summary(model_household_after)
```

```{r}
library(readr)

df4 <- read_csv2("cons_sec_price_merged.csv")

# Check the first few rows
head(df4)
```

```{r}
# Remove rows 73 to 75
df4 <- df4[-c(73:75), ]

# Remove columns 7 to 21
df4 <- df4[, -c(7:21)]

# Check result
str(df4)
head(df4)
```

```{r}
df4$Month <- as.Date(df4$Month, format = "%d.%m.%Y")
```

```{r}
library(lubridate)
df4$Month <- dmy(df4$Month)
```

```{r}
library(lubridate)
df4$Month <- dmy(df4$Month)
```

```{r}
reform_date <- as.Date("2023-01-01")
df4$Period <- ifelse(df4$Month < reform_date, "Before", "After")
```

```{r}
# Add 'Period' column: adjust the reform date as needed
reform_date <- as.Date("2023-01-01")
df4$Month <- as.Date(df4$Month)
df4$Period <- ifelse(df4$Month < reform_date, "Before", "After")
```

```{r}

```
